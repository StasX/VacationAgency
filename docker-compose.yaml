version: '3.4'
services:
#-------------------------------------------------------------------------------------------------

  mysql:
    container_name: mysql
    image: mysql:8.3.0

    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_PORT: ${MYSQL_PORT}
    restart: on-failure
    networks:
      network:
        aliases:
         - mysql
    # Create volumes
    volumes:
    # Seed sql file
     - ./mysql:/docker-entrypoint-initdb.d
    # Persistent data
     - data:/var/lib/mysql
    # Expose ports ( Allow connection  with MySQL Worck Bench )
    ports:
     - 3306:3306


    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root -p${MYSQL_ROOT_PASSWORD}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

#-------------------------------------------------------------------------------------------------

  vacations:
    container_name: vacations
    build: 
      context: ./vacations
      args:
       - MYSQL_DATABASE=${MYSQL_DATABASE}
       - MYSQL_USER=root
       - MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
       - MYSQL_HOST=mysql
       - MYSQL_PORT=3306
       - SECRET_KEY=${SECRET_KEY}
    restart: on-failure
    networks:
      network:
        aliases:
         - vacations
    depends_on:
      mysql:
        condition: service_healthy
        restart: true
    ports:
     - 8080:5000

#-------------------------------------------------------------------------------------------------

  statistics-server:
    container_name: statistics_server
    build:
      context: ./statistics/server
      args:
       - MYSQL_DATABASE=${MYSQL_DATABASE}
       - MYSQL_USER=root
       - MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
       - MYSQL_HOST=mysql
       - MYSQL_PORT=3306
       - SECRET_KEY=${SECRET_KEY}
    restart: on-failure
    networks:
      network:
        aliases:
         - statistics
    depends_on:
      mysql:
        condition: service_healthy
        restart: true
    ports:
     - 80:8000

#-------------------------------------------------------------------------------------------------

  statistics-client:
    build: ./statistics/client
    container_name: statistics_client

#-------------------------------------------------------------------------------------------------

networks:
  network:
    external: false
    driver: bridge

volumes:
  data: